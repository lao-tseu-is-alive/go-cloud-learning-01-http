---
apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: go-info-server-service   # Name of the resource
  labels:     # The labels that will be applied
    app: go-info-server
  annotations:
    externalTrafficPolicy: "local"
spec:
  #type: NodePort                 # A port is opened on each node in your cluster via Kube proxy.
  # https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
  type: LoadBalancer             # Adds a load balancer (from the cloud provider)
  # k3s will deploy a daemonset listening on the given port on the host node
  # By default k3s have a builtin load balancer called "klipper" https://github.com/k3s-io/klipper-lb ok for one dev node.
  # It is possible to run multiple Services on the same node, as long as they use different ports.
  # in case you are using a 'real' k3s cluster with multiple nodes consider using metalLB instead
  externalTrafficPolicy: Local
  ports:                         # Take incoming HTTP requests on port 9090 and forward them to the targetPort of container
    - name: http
      port: 8000
      targetPort: 8000            # Should match the PORT env variable in deployment and containerPort that the Go application listens on
  selector:
    app: go-info-server         # Map any pod with label `app=go-hello-world` to this service
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: go-info-server           # Name of the Kubernetes resource
spec:
  replicas: 2                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-info-server        # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all the pods in this deployment
        app: go-info-server
    spec:                        # Spec for the container which will run in the Pod
      securityContext:           # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
        runAsUser: 10111           # using the user 'gouser' created in Dockerfile in the Alpine image
        runAsGroup: 10111          # using the group 'gouser' created in Dockerfile in the Alpine image
        fsGroup: 100             # by adding fsGroup field, all processes of the container are also part
                                 # of the supplementary group ID 100 (users).
        supplementalGroups:
          - 100
      containers:
      - name: go-info-server
        image: go-info-server:0.2.8
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 10111           # using the user 'gouser' created in Dockerfile in the Alpine image
          runAsGroup: 10111          # using the group 'gouser' created in Dockerfile in the Alpine image
          capabilities:
            drop:
              - 'ALL'
          readOnlyRootFilesystem: true
        ports:
          - containerPort: 8000  # Should match the PORT env variable above  that the Go application listens on
        resources:
          limits:
            cpu: 1000m
            memory: 250Mi
          requests:
            cpu: 100m
            memory: 32Mi
        livenessProbe:           # To check the health of the Pod
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 2
        readinessProbe:          # To check if the Pod is ready to serve traffic or not
          httpGet:
            path: /readiness
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          timeoutSeconds: 2
        env:
          - name: PORT
            value: "8000"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: MY_POD_SERVICE_ACCOUNT
            valueFrom:
              fieldRef:
                fieldPath: spec.serviceAccountName
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: go-info-server-ingress
#  labels:
#    name: go-info-server
#  annotations:
#    kubernetes.io/ingress.class: "traefik"
#    traefik.frontend.passHostHeader: "true"
#    #traefik.backend.loadbalancer.sticky: "true"
#spec:
#  rules:
#    - host: go-info-server.rancher.localhost
#      http:
#        paths:
#          - pathType: Prefix
#            path: "/"
#            backend:
#              service:
#                name: go-info-server-service
#                port:
#                  number: 8000
#  tls:
#    - hosts:
#        - go-info-server.rancher.localhost
